/**
 * FingerprintJS Server API Node.js SDK v2.3.0 - Copyright (c) FingerprintJS, Inc, 2023 (https://fingerprint.com)
 * Licensed under the MIT (http://www.opensource.org/licenses/mit-license.php) license.
 */

import fetchFn from 'node-fetch';

var Region;
(function (Region) {
    Region["EU"] = "EU";
    Region["AP"] = "AP";
    Region["Global"] = "Global";
})(Region || (Region = {}));
var AuthenticationMode;
(function (AuthenticationMode) {
    AuthenticationMode["AuthHeader"] = "AuthHeader";
    AuthenticationMode["QueryParameter"] = "QueryParameter";
})(AuthenticationMode || (AuthenticationMode = {}));
function isVisitorsError(response) {
    return (((response === null || response === void 0 ? void 0 : response.hasOwnProperty('status')) &&
        (response.status === 403 || response.status === 429) &&
        (response === null || response === void 0 ? void 0 : response.hasOwnProperty('error')) &&
        typeof response.error === 'string') ||
        false);
}
function isEventError(response) {
    var _a, _b;
    return (((response === null || response === void 0 ? void 0 : response.hasOwnProperty('status')) &&
        (response.status === 403 || response.status === 404) &&
        (response === null || response === void 0 ? void 0 : response.hasOwnProperty('error')) &&
        ((_a = response.error) === null || _a === void 0 ? void 0 : _a.hasOwnProperty('message')) &&
        typeof response.error.message === 'string' &&
        ((_b = response.error) === null || _b === void 0 ? void 0 : _b.hasOwnProperty('code')) &&
        typeof response.error.code === 'string') ||
        false);
}

var version = "2.3.0";

const euRegionUrl = 'https://eu.api.fpjs.io/';
const apRegionUrl = 'https://ap.api.fpjs.io/';
const globalRegionUrl = 'https://api.fpjs.io/';
function getIntegrationInfo() {
    return `fingerprint-pro-server-node-sdk/${version}`;
}
function getEventUrl(requestId, region, apiKey) {
    const params = {
        ii: getIntegrationInfo(),
    };
    if (apiKey) {
        params.api_key = apiKey;
    }
    return `${getServerApiUrl(region)}events/${requestId}?${serializeQueryStringParams(params)}`;
}
function getVisitorsUrl(region, visitorId, filter, apiKey) {
    const queryStringParameters = Object.assign(Object.assign({}, filter), { ii: getIntegrationInfo() });
    if (apiKey) {
        queryStringParameters.api_key = apiKey;
    }
    const serverApiPath = getVisitorsPath(region, visitorId);
    const queryString = serializeQueryStringParams(queryStringParameters);
    return `${serverApiPath}?${queryString}`;
}
function serializeQueryStringParams(params) {
    const urlSearchParams = new URLSearchParams(Object.entries(params));
    return urlSearchParams.toString();
}
function getVisitorsPath(region, visitorId) {
    const serverApiUrl = getServerApiUrl(region);
    const serverApiPath = `${serverApiUrl}visitors/${visitorId}`;
    return serverApiPath;
}
function getServerApiUrl(region) {
    switch (region) {
        case Region.EU:
            return euRegionUrl;
        case Region.AP:
            return apRegionUrl;
        case Region.Global:
            return globalRegionUrl;
        default:
            throw new Error('Unsupported region');
    }
}

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class FingerprintJsServerApiClient {
    /**
     * FingerprintJS server API client used to fetch data from FingerprintJS
     * @constructor
     * @param {Options} options - Options for FingerprintJS server API client
     */
    constructor(options) {
        var _a, _b;
        if (!options.region) {
            throw Error('Region is not set');
        }
        if (!options.apiKey) {
            throw Error('Api key is not set');
        }
        this.region = options.region;
        this.apiKey = options.apiKey;
        this.authenticationMode = (_a = options.authenticationMode) !== null && _a !== void 0 ? _a : AuthenticationMode.AuthHeader; // Default auth mode is AuthHeader
        this.fetch = (_b = options.fetch) !== null && _b !== void 0 ? _b : fetchFn;
    }
    getEvent(requestId) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!requestId) {
                throw new TypeError('requestId is not set');
            }
            const url = this.authenticationMode === AuthenticationMode.QueryParameter
                ? getEventUrl(requestId, this.region, this.apiKey)
                : getEventUrl(requestId, this.region);
            const headers = this.getHeaders();
            return this.fetch(url, {
                method: 'GET',
                headers,
            })
                .then((response) => __awaiter(this, void 0, void 0, function* () {
                const jsonResponse = yield response.json();
                if (response.status !== 200) {
                    jsonResponse.status = response.status;
                    throw jsonResponse;
                }
                return jsonResponse;
            }))
                .catch((err) => {
                if (isEventError(err)) {
                    throw err;
                }
                const error = err instanceof Error ? err.toString() : JSON.stringify(err);
                throw {
                    status: 0,
                    error: error,
                };
            });
        });
    }
    /**
     * Gets history for the given visitor
     * @param {string} visitorId - Identifier of the visitor
     * @param {VisitorHistoryFilter} filter - Visitor history filter
     */
    getVisitorHistory(visitorId, filter) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!visitorId) {
                throw TypeError('VisitorId is not set');
            }
            const url = this.authenticationMode === AuthenticationMode.QueryParameter
                ? getVisitorsUrl(this.region, visitorId, filter, this.apiKey)
                : getVisitorsUrl(this.region, visitorId, filter);
            const headers = this.getHeaders();
            return this.fetch(url, {
                method: 'GET',
                headers,
            })
                .then((response) => __awaiter(this, void 0, void 0, function* () {
                const jsonResponse = yield response.json();
                if (response.status === 200) {
                    return jsonResponse;
                }
                if (response.status === 429) {
                    const retryAfter = response.headers.get('retry-after') || '';
                    jsonResponse.retryAfter = retryAfter === '' ? 1 : parseInt(retryAfter);
                }
                jsonResponse.status = response.status;
                throw jsonResponse;
            }))
                .catch((err) => {
                if (isVisitorsError(err)) {
                    throw err;
                }
                throw {
                    status: 0,
                    error: new Error(err.toString()),
                };
            });
        });
    }
    getHeaders() {
        return this.authenticationMode === AuthenticationMode.AuthHeader
            ? { 'Auth-API-Key': this.apiKey }
            : undefined;
    }
}

export { AuthenticationMode, FingerprintJsServerApiClient, Region, getEventUrl, getVisitorsUrl, isEventError, isVisitorsError };
